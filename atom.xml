<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DRAPORLAND</title>
  <subtitle>“Witness me.”</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://gabrieldrapor.github.io/"/>
  <updated>2017-08-19T05:48:32.994Z</updated>
  <id>http://gabrieldrapor.github.io/</id>
  
  <author>
    <name>Gabriel Drapor</name>
    <email>diary.sjr@live.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SQL的时间／日期无脑转换</title>
    <link href="http://gabrieldrapor.github.io/2017/08/08/posts/170808_sql_time_switch/"/>
    <id>http://gabrieldrapor.github.io/2017/08/08/posts/170808_sql_time_switch/</id>
    <published>2017-08-08T00:00:00.000Z</published>
    <updated>2017-08-19T05:48:32.994Z</updated>
    
    <content type="html"><![CDATA[<p>最近在公司写数据需求的时候，由于各个表里存的日期和时间格式不尽相同，所以时常会遇到各种格式的日期转换的问题，一度搞得我非常烦躁。后来终于忍无可忍，仔细地去研究了一波，发现其实并没有想象中的那么麻烦，在此做个总结。</p>
<p>其实主要涉及的几种日期格式就是以下几种：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>TIMESTAMP</td>
<td>‘2017-08-08 15:56:31.111’</td>
</tr>
<tr>
<td>STRING(‘yyyyMMdd’)</td>
<td>‘20170808’</td>
</tr>
<tr>
<td>DATE(‘yyyy-MM-dd’)</td>
<td>‘2017-08-08’</td>
</tr>
<tr>
<td>INT</td>
<td>20170808</td>
</tr>
</tbody>
</table>
<p>其中主要会用到两个非常万能的函数，from_unixtime() 和 unix_timestamp()。</p>
<ul>
<li>unix_timestamp()函数是将其他格式的时间转化为unix时间戳(e.g.:1502179397)，如果输入的时间已经是TIMESTAMP，则无需指定其他参数；如果输入的时间为DATE，则需要再多加一项参数标明格式，比如如果需要将‘2017-08-08’转为unix时间戳的话，应该写成unix_timestamp(‘2017-08-08’, ‘yyyy-MM-dd’)【<strong>特别注意：MM代表月，mm代表的是分钟</strong>】即可；同样如果需要将‘20170808’转为unix时间戳的话，应该写成unix_timestamp(‘2017-08-08’, ‘yyyyMMdd’)即可；</li>
<li>from_unixtime()函数则是将unix时间戳格式的时间转换为其他格式，默认是转化为TIMESTAMP，如果需要转化为特定格式则仿照上面添加第二个参数标明格式即可；</li>
</ul>
<p>于是，在遇到时间格式转换的问题时，我们可以这样做：首先将原格式用UNIX_TIMESTAMP()转换为UNIX时间戳，再用unix_timestamp()转成所需的格式即可，这种方法个人感觉非常无脑但确实有效。</p>
<p>比如需要将‘2017-08-08’转换为‘20170808’，按照上面的无脑思路，直接from_unixtime(unix_timestamp(‘2017-08-08’,’yyyy-MM-dd’),’yyyyMMdd’) 即可，反之也是一样的道理。     </p>
<p>当然这其中存在很多捷径，比如TO_DATE()可以直接将TIMESTAMP转为DATE，当然要比以上说的这种无脑方法方便很多，但是个人觉得记忆起来很麻烦，而且这些函数各自也都具有一些局限性，只能将某些特定格式转换为另一些特定格式。</p>
<p>最后还应注意一点，也是我最近时常遇到的问题，就是在做表的联结的时候，以日期相等作为联结条件时，一定要确保等式两边的格式和类型都是一样的，’2017-08-08’ = ‘20170808’这个等式并不成立。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在公司写数据需求的时候，由于各个表里存的日期和时间格式不尽相同，所以时常会遇到各种格式的日期转换的问题，一度搞得我非常烦躁。后来终于忍无可忍，仔细地去研究了一波，发现其实并没有想象中的那么麻烦，在此做个总结。&lt;/p&gt;
&lt;p&gt;其实主要涉及的几种日期格式就是以下几种：&lt;/p
    
    </summary>
    
      <category term="SQL" scheme="http://gabrieldrapor.github.io/categories/SQL/"/>
    
    
  </entry>
  
  <entry>
    <title>SQL的时间／日期无脑转换</title>
    <link href="http://gabrieldrapor.github.io/2017/08/08/170808_sql_time_switch/"/>
    <id>http://gabrieldrapor.github.io/2017/08/08/170808_sql_time_switch/</id>
    <published>2017-08-08T00:00:00.000Z</published>
    <updated>2017-08-08T08:27:53.209Z</updated>
    
    <content type="html"><![CDATA[<p>​        最近在公司写数据需求的时候，由于各个表里存的日期和时间格式不尽相同，所以时常会遇到各种格式的日期转换的问题，一度搞得我非常烦躁。后来终于忍无可忍，仔细地去研究了一波，发现其实并没有想象中的那么麻烦，故在此做个总结。</p>
<p>​    其实主要涉及的几种日期格式就是以下几种：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>TIMESTAMP</td>
<td>‘2017-08-08 15:56:31.111’</td>
</tr>
<tr>
<td>STRING(‘yyyyMMdd’)</td>
<td>‘20170808’</td>
</tr>
<tr>
<td>DATE(‘yyyy-MM-dd’)</td>
<td>‘2017-08-08’</td>
</tr>
<tr>
<td>INT</td>
<td>20170808</td>
</tr>
</tbody>
</table>
<p>​    其中主要会用到两个非常万能的函数，from_unixtime() 和 unix_timestamp()。</p>
<ul>
<li>unix_timestamp()函数是将其他格式的时间转化为unix时间戳(e.g.:1502179397)，如果输入的时间已经是TIMESTAMP，则无需指定其他参数；如果输入的时间为DATE，则需要再多加一项参数标明格式，比如如果需要将‘2017-08-08’转为unix时间戳的话，应该写成unix_timestamp(‘2017-08-08’, ‘yyyy-MM-dd’)【<strong>特别注意：MM代表月，mm代表的是分钟</strong>】即可；同样如果需要将‘20170808’转为unix时间戳的话，应该写成unix_timestamp(‘2017-08-08’, ‘yyyyMMdd’)即可；</li>
<li>from_unixtime()函数则是将unix时间戳格式的时间转换为其他格式，默认是转化为TIMESTAMP，如果需要转化为特定格式则仿照上面添加第二个参数标明格式即可；</li>
</ul>
<p>​    于是，在遇到时间格式转换的问题时，我们可以这样做：首先将原格式用UNIX_TIMESTAMP()转换为UNIX时间戳，再用unix_timestamp()转成所需的格式即可，这种方法个人感觉非常无脑但确实有效。</p>
<p>​    比如需要将‘2017-08-08’转换为‘20170808’，按照上面的无脑思路，直接from_unixtime(unix_timestamp(‘2017-08-08’,’yyyy-MM-dd’),’yyyyMMdd’) 即可，反之也是一样的道理。     </p>
<p>​    当然这其中存在很多捷径，比如TO_DATE()可以直接将TIMESTAMP转为DATE，当然要比以上说的这种无脑方法方便很多，但是个人觉得记忆起来很麻烦，而且这些函数各自也都具有一些局限性，只能将某些特定格式转换为另一些特定格式。</p>
<p>​    最后还应注意一点，也是我最近时常遇到的问题，就是在做表的联结的时候，以日期相等作为联结条件时，一定要确保等式两边的格式和类型都是一样的，’2017-08-08’ = ‘20170808’这个等式并不成立。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​        最近在公司写数据需求的时候，由于各个表里存的日期和时间格式不尽相同，所以时常会遇到各种格式的日期转换的问题，一度搞得我非常烦躁。后来终于忍无可忍，仔细地去研究了一波，发现其实并没有想象中的那么麻烦，故在此做个总结。&lt;/p&gt;
&lt;p&gt;​    其实主要涉及的几
    
    </summary>
    
      <category term="SQL" scheme="http://gabrieldrapor.github.io/categories/SQL/"/>
    
    
  </entry>
  
  <entry>
    <title>Codewars上一道5 kyu的SQL题</title>
    <link href="http://gabrieldrapor.github.io/2017/07/21/posts/170721_a_sql_ex/"/>
    <id>http://gabrieldrapor.github.io/2017/07/21/posts/170721_a_sql_ex/</id>
    <published>2017-07-21T00:00:00.000Z</published>
    <updated>2017-08-19T05:48:32.730Z</updated>
    
    <content type="html"><![CDATA[<p>具体思路和过程以后有时间再来整理（Flag）。</p>
<p>原题目的url是<a href="https://www.codewars.com/kata/calculating-running-total" target="_blank" rel="external">https://www.codewars.com/kata/calculating-running-total</a></p>
<p>参考了一下简单的情况 <a href="http://sql55.com/query/cumulative-amount-1.php" target="_blank" rel="external">http://sql55.com/query/cumulative-amount-1.php</a> ，然后自己建表鼓捣了一会儿，</p>
<p>终于得(meng)出了一个可行的答案：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">CAST</span>(p1.created_at <span class="keyword">AS</span> <span class="built_in">DATE</span>) <span class="keyword">AS</span> <span class="built_in">date</span>,</div><div class="line">       <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> p1.title) <span class="keyword">AS</span> <span class="keyword">count</span>,</div><div class="line">       <span class="keyword">COUNT</span>(p2.title)/<span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> p1.title) <span class="keyword">AS</span> total</div><div class="line"><span class="keyword">FROM</span> posts p1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> posts p2</div><div class="line">  <span class="keyword">ON</span> to_char(p1.created_at, <span class="string">'YYYY-MM-DD'</span>) &gt;= to_char(p2.created_at, <span class="string">'YYYY-MM-DD'</span>)</div><div class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="built_in">date</span></div><div class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">date</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;具体思路和过程以后有时间再来整理（Flag）。&lt;/p&gt;
&lt;p&gt;原题目的url是&lt;a href=&quot;https://www.codewars.com/kata/calculating-running-total&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;h
    
    </summary>
    
      <category term="SQL" scheme="http://gabrieldrapor.github.io/categories/SQL/"/>
    
    
      <category term="Codewars" scheme="http://gabrieldrapor.github.io/tags/Codewars/"/>
    
  </entry>
  
  <entry>
    <title>Codewars上一道5 kyu的SQL题</title>
    <link href="http://gabrieldrapor.github.io/2017/07/21/170721_a_sql_ex/"/>
    <id>http://gabrieldrapor.github.io/2017/07/21/170721_a_sql_ex/</id>
    <published>2017-07-21T00:00:00.000Z</published>
    <updated>2017-08-06T03:36:36.297Z</updated>
    
    <content type="html"><![CDATA[<p>具体思路和过程以后有时间再来整理（Flag）。</p>
<p>原题目的url是<a href="https://www.codewars.com/kata/calculating-running-total" target="_blank" rel="external">https://www.codewars.com/kata/calculating-running-total</a></p>
<p>参考了一下简单的情况 <a href="http://sql55.com/query/cumulative-amount-1.php" target="_blank" rel="external">http://sql55.com/query/cumulative-amount-1.php</a> ，然后自己建表鼓捣了一会儿，</p>
<p>终于得(meng)出了一个可行的答案：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">CAST</span>(p1.created_at <span class="keyword">AS</span> <span class="built_in">DATE</span>) <span class="keyword">AS</span> <span class="built_in">date</span>,</div><div class="line">       <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> p1.title) <span class="keyword">AS</span> <span class="keyword">count</span>,</div><div class="line">       <span class="keyword">COUNT</span>(p2.title)/<span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> p1.title) <span class="keyword">AS</span> total</div><div class="line"><span class="keyword">FROM</span> posts p1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> posts p2</div><div class="line">  <span class="keyword">ON</span> to_char(p1.created_at, <span class="string">'YYYY-MM-DD'</span>) &gt;= to_char(p2.created_at, <span class="string">'YYYY-MM-DD'</span>)</div><div class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="built_in">date</span></div><div class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">date</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;具体思路和过程以后有时间再来整理（Flag）。&lt;/p&gt;
&lt;p&gt;原题目的url是&lt;a href=&quot;https://www.codewars.com/kata/calculating-running-total&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;h
    
    </summary>
    
      <category term="SQL" scheme="http://gabrieldrapor.github.io/categories/SQL/"/>
    
    
  </entry>
  
  <entry>
    <title>记录一下最近参加过的面试；</title>
    <link href="http://gabrieldrapor.github.io/2017/07/11/posts/170707-firstinterview-md/"/>
    <id>http://gabrieldrapor.github.io/2017/07/11/posts/170707-firstinterview-md/</id>
    <published>2017-07-11T00:00:00.000Z</published>
    <updated>2017-08-19T05:48:32.466Z</updated>
    
    <content type="html"><![CDATA[<p>最近几天参加了几次面试，也是我人生中的头几次面试，感觉值得一记，故有此篇。</p>
<a id="more"></a>
<p><strong>17.7.7：</strong>　　</p>
<p>　　昨天下午接到了一家互联网公司HR的电话，问我是不是还在找实习以及有没有时间参加电话面试。于是昨天晚上+今天早上稍微地准备了一下，想着面试官会问关于Python的一些高级的东西比如解释器或者GIL什么的就去补了一波知识，并且对这家公司也做了一些调查，有了一些了解。</p>
<p>　　终于等到下午三点开始了面试，形式是电话面试。在得知要写代码之后，我心里其实有点慌，因为我知道自己的数据结构和算法很薄弱，而且动手的时候可能会卡在一些细枝末节的地方。面试官人很好，上来没有让我做自我介绍，直接让我把自己掌握的技术说了一下，并对我在博客上和GIthub上的一些东西以及过往经历提了一些问题。很明显对方在面试前还是做了一点工作的，而且整个面试过程基本没有废话，我很喜欢这种面试风格。后面让我动手写一道算法题，是在数组中找出三个数之和为0的一道题。开始不久我就卡住了，原先以为自己会卡在数据结构或者算法的地方，后来发现不是这样的，我卡在了动手实现上。一些东西我知道思路，但我写不出来。究其原因的话，可能也是我太久没刷OJ了，动手能力退化了不少，另一反面本身基础就不够扎实，编码能力本来也不强，再加上面试时候的紧张， 结果就不太尽如人意。</p>
<p> 　　面试结果怎样已经没那么重要了，重要的是我的确在这次面试中清楚地认识到了自己还是说得太多看得太多做得太少，导致动手能力很弱，之后还是要在这方面加强才是。很感谢那家公司给我这个面试的机会。</p>
<hr>
<p><strong>17.7.8：</strong></p>
<p>　　 昨天面试的时候表现得比较糟糕，我以为已经铁定没戏了，结果昨天晚些时候HR跟我说还有一轮面试，我以为这次会是关于ML方面的面试，于是又回去翻了翻之前记过的笔记。没想到，今天的面试还是写代码，不过面试官看我昨天表现得那么惨，今天就给了我一个简单的问题，求第n个斐波那契数，我最开始用递归写了一个，后来面试官问我还有没有别的方法，我又把用循环写的那种方式写了一下；之后面试官又问了我一个递进的问题：一只蜗牛一次可以爬１级或２级或３级或……或n级台阶，现在它要爬上n级台阶，问有多少种爬法？起初我以为是一个等差数列问题，愚蠢地说了一个n(n-1)/2。面试官置疑了一下，我发现了根本不对，于是开始拿出纸笔算，在面试官的引导下捣鼓了很久才得出正确的结果【当时是先计算n=1，n=2，n=3的情况然后推广得到通项是2^(n-1)，7.13晚上洗澡的时候突然想到其实除了最后一级台阶，其他所有台阶都有两种可能，迈上或者不迈，于是n-1级台阶就是2^(n-1)种情况…】…后面还聊了一些关于公司技术栈的事情，发现其实技术不太对口，他们目前主要还是做后端，而我还是想找一份数据相关的实习…总之第二轮面试依旧很僵硬，基本已经没有希望了我觉得。。</p>
<hr>
<p><strong>17.7.11：</strong></p>
<p>　　之前向洋葱数学投了简历，HR联系了我好几次一直没有联系上我，我一度觉得我可能和这家公司没有缘分，但终于我还是联系上了他们的HR，得知真相之后对HR的坚持不懈莫名有些感动…</p>
<p>　　于是今天就去面试了 ，到了公司之后最大的感觉就是“哇这办公环境怎么这么好”，坐着观察了一会儿之后感觉这个公司整体的氛围很让我喜欢。之后数据组的组长就来了，首先是做了一下对我基本情况的一些了解，之后先问了一个SQL的问题，我心里很没底，因为我虽然过过一遍SQL的用法但并没有太多的实践经验，导致只说了一个基本思路；他看我SQL不太熟，于是问我如果用pandas的DataFrame怎么做，我同样回答了一个十分笨重但可行的方法；之后他又问了我一个对dict操作的python问题，我同样是用了一个“能解决问题但看起来有些笨拙”的方法做，其中被他指出了一些问题，经指出后还是改正了这些问题。这部分带给我的反思就是：<strong>代码写得太少啦！很多很基本的东西都没有记住！以后一定要多写代码！多写代码！！！！</strong>；再之后面试官问了我这样一个问题：因为他们是做在线教育的，他们现在想做一个类似于Dota里面的天梯系统，让我做一个简单的设计。对于这个问题其实我有一些头绪，但是都很乱，组织不起来，在他的帮助下和一段时间的整理之后，终于大致地把思路理了出来，他还带着我对其中的一个核心部分进行了设计相关的讨论，整个过程他都在引导我一步步地达到核心，面试体验还是相当愉快的。之后又聊了一些别的技术的事情，比如我问了一下他们公司的技术栈，以及我一直不了解的为什么初创公司都爱用MongoDB之类的。和他聊的大概就是以上这些。</p>
<p>　　后面又和HR聊了一会儿，聊了很多，方方面面都聊到了，个人目标啊，性格啊，等等等等，于是聊了很久，也询问了一些关于他们公司的事情。【HR还建议我应该找一个活泼开朗的女朋友……</p>
<p>　　出来之后我才发现面试竟然持续了两个多小时，而我一点感觉都没有，完全沉浸在其中，没有注意到时间的流逝。总的来说面试体验还是十分不错的，而且技术也非常对口，期待能收到人生第一份实习Offer。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近几天参加了几次面试，也是我人生中的头几次面试，感觉值得一记，故有此篇。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Paths" scheme="http://gabrieldrapor.github.io/tags/Paths/"/>
    
  </entry>
  
  <entry>
    <title>记录一下最近参加过的面试；</title>
    <link href="http://gabrieldrapor.github.io/2017/07/11/170707-firstinterview-md/"/>
    <id>http://gabrieldrapor.github.io/2017/07/11/170707-firstinterview-md/</id>
    <published>2017-07-11T00:00:00.000Z</published>
    <updated>2017-08-06T03:36:42.208Z</updated>
    
    <content type="html"><![CDATA[<p>最近几天参加了几次面试，也是我人生中的头几次面试，感觉值得一记，故有此篇。</p>
<a id="more"></a>
<p><strong>17.7.7：</strong>　　</p>
<p>　　昨天下午接到了一家互联网公司HR的电话，问我是不是还在找实习以及有没有时间参加电话面试。于是昨天晚上+今天早上稍微地准备了一下，想着面试官会问关于Python的一些高级的东西比如解释器或者GIL什么的就去补了一波知识，并且对这家公司也做了一些调查，有了一些了解。</p>
<p>　　终于等到下午三点开始了面试，形式是电话面试。在得知要写代码之后，我心里其实有点慌，因为我知道自己的数据结构和算法很薄弱，而且动手的时候可能会卡在一些细枝末节的地方。面试官人很好，上来没有让我做自我介绍，直接让我把自己掌握的技术说了一下，并对我在博客上和GIthub上的一些东西以及过往经历提了一些问题。很明显对方在面试前还是做了一点工作的，而且整个面试过程基本没有废话，我很喜欢这种面试风格。后面让我动手写一道算法题，是在数组中找出三个数之和为0的一道题。开始不久我就卡住了，原先以为自己会卡在数据结构或者算法的地方，后来发现不是这样的，我卡在了动手实现上。一些东西我知道思路，但我写不出来。究其原因的话，可能也是我太久没刷OJ了，动手能力退化了不少，另一反面本身基础就不够扎实，编码能力本来也不强，再加上面试时候的紧张， 结果就不太尽如人意。</p>
<p> 　　面试结果怎样已经没那么重要了，重要的是我的确在这次面试中清楚地认识到了自己还是说得太多看得太多做得太少，导致动手能力很弱，之后还是要在这方面加强才是。很感谢那家公司给我这个面试的机会。</p>
<hr>
<p><strong>17.7.8：</strong></p>
<p>　　 昨天面试的时候表现得比较糟糕，我以为已经铁定没戏了，结果昨天晚些时候HR跟我说还有一轮面试，我以为这次会是关于ML方面的面试，于是又回去翻了翻之前记过的笔记。没想到，今天的面试还是写代码，不过面试官看我昨天表现得那么惨，今天就给了我一个简单的问题，求第n个斐波那契数，我最开始用递归写了一个，后来面试官问我还有没有别的方法，我又把用循环写的那种方式写了一下；之后面试官又问了我一个递进的问题：一只蜗牛一次可以爬１级或２级或３级或……或n级台阶，现在它要爬上n级台阶，问有多少种爬法？起初我以为是一个等差数列问题，愚蠢地说了一个n(n-1)/2。面试官置疑了一下，我发现了根本不对，于是开始拿出纸笔算，在面试官的引导下捣鼓了很久才得出正确的结果【当时是先计算n=1，n=2，n=3的情况然后推广得到通项是2^(n-1)，7.13晚上洗澡的时候突然想到其实除了最后一级台阶，其他所有台阶都有两种可能，迈上或者不迈，于是n-1级台阶就是2^(n-1)种情况…】…后面还聊了一些关于公司技术栈的事情，发现其实技术不太对口，他们目前主要还是做后端，而我还是想找一份数据相关的实习…总之第二轮面试依旧很僵硬，基本已经没有希望了我觉得。。</p>
<hr>
<p><strong>17.7.11：</strong></p>
<p>　　之前向洋葱数学投了简历，HR联系了我好几次一直没有联系上我，我一度觉得我可能和这家公司没有缘分，但终于我还是联系上了他们的HR，得知真相之后对HR的坚持不懈莫名有些感动…</p>
<p>　　于是今天就去面试了 ，到了公司之后最大的感觉就是“哇这办公环境怎么这么好”，坐着观察了一会儿之后感觉这个公司整体的氛围很让我喜欢。之后数据组的组长就来了，首先是做了一下对我基本情况的一些了解，之后先问了一个SQL的问题，我心里很没底，因为我虽然过过一遍SQL的用法但并没有太多的实践经验，导致只说了一个基本思路；他看我SQL不太熟，于是问我如果用pandas的DataFrame怎么做，我同样回答了一个十分笨重但可行的方法；之后他又问了我一个对dict操作的python问题，我同样是用了一个“能解决问题但看起来有些笨拙”的方法做，其中被他指出了一些问题，经指出后还是改正了这些问题。这部分带给我的反思就是：<strong>代码写得太少啦！很多很基本的东西都没有记住！以后一定要多写代码！多写代码！！！！</strong>；再之后面试官问了我这样一个问题：因为他们是做在线教育的，他们现在想做一个类似于Dota里面的天梯系统，让我做一个简单的设计。对于这个问题其实我有一些头绪，但是都很乱，组织不起来，在他的帮助下和一段时间的整理之后，终于大致地把思路理了出来，他还带着我对其中的一个核心部分进行了设计相关的讨论，整个过程他都在引导我一步步地达到核心，面试体验还是相当愉快的。之后又聊了一些别的技术的事情，比如我问了一下他们公司的技术栈，以及我一直不了解的为什么初创公司都爱用MongoDB之类的。和他聊的大概就是以上这些。</p>
<p>　　后面又和HR聊了一会儿，聊了很多，方方面面都聊到了，个人目标啊，性格啊，等等等等，于是聊了很久，也询问了一些关于他们公司的事情。【HR还建议我应该找一个活泼开朗的女朋友……</p>
<p>　　出来之后我才发现面试竟然持续了两个多小时，而我一点感觉都没有，完全沉浸在其中，没有注意到时间的流逝。总的来说面试体验还是十分不错的，而且技术也非常对口，期待能收到人生第一份实习Offer。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近几天参加了几次面试，也是我人生中的头几次面试，感觉值得一记，故有此篇。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Paths" scheme="http://gabrieldrapor.github.io/tags/Paths/"/>
    
  </entry>
  
  <entry>
    <title>来写个学期总结吧</title>
    <link href="http://gabrieldrapor.github.io/2017/07/01/posts/170701_semester-summary/"/>
    <id>http://gabrieldrapor.github.io/2017/07/01/posts/170701_semester-summary/</id>
    <published>2017-07-01T00:00:00.000Z</published>
    <updated>2017-08-19T05:48:32.202Z</updated>
    
    <content type="html"><![CDATA[<p>这个学期就这样结束了，简单来写个总结吧，顺便做点计划。</p>
<a id="more"></a>
<hr>
<ul>
<li>看完了Coursera上Andrew Ng的Machine Learning；完成相应作业；</li>
<li>读周志华先生的《机器学习》，但还有几章没读完；</li>
<li>为了解决一些疑问，用Python写过几个小爬虫；</li>
<li>看完了《SQL必知必会》，细致地学习了一波SQL；</li>
<li>《利用Python进行数据分析》看了小半本，学习了一些Numpy和pandas的用法，用Jupyter Notebook做了笔记；</li>
<li>学了一点PyQt5；</li>
</ul>
<ul>
<li>学习了数理统计、偏微分方程、实变函数与泛函分析、数学模型和复变函数与积分变换这几门课，总的来说每门课都还是很有意思的，惭愧的是我下的工夫还是太少；</li>
</ul>
<ul>
<li>开始学习日语，背完了五十音图；</li>
</ul>
<ul>
<li>参加了一次校赛建模，本来是想用numpy和pandas替代MATLAB，结果发现还是不行，于是就顺便增强了一下MATLAB方面的技能，但做得很随意，最后得了二等奖；</li>
<li>报名参加了2017中国高校计算机大赛—大数据挑战赛；</li>
</ul>
<ul>
<li>刷了几波实习信息，也投了一波简历，结果最后发现了一些意外的情况（其实是操作失误），导致估计假期的实习期待落空了；</li>
<li>这两天考完试把双系统弄好了，Ubuntu+Win10，尽量把和编程开发有关的事情都移到Ubuntu里做，WIn10留作娱乐，希望下一次换系统是Mac OS；</li>
</ul>
<hr>
<ul>
<li>《Planet Earth II》</li>
<li>《嫌疑人X的献身》（中国版）</li>
<li>《人民的名义》</li>
<li>《驴得水》</li>
<li>《看不见的客人》</li>
<li>《百鸟朝凤》</li>
<li>《摔跤吧！爸爸 Dangal》</li>
<li>《TBBT Season 10》</li>
<li>《和食双神：最后的约定》</li>
<li>《四重奏》</li>
<li>《辩护人》</li>
<li>《求婚大作战》</li>
<li>《Silcon Valley Season 4》</li>
<li>《伊斯坦布尔的猫/Kedi》</li>
<li>《Elementary Season 5》</li>
<li>《The Flash Season 3》</li>
<li>《S.H.I.E.L.D. Season 4》</li>
</ul>
<ul>
<li>机器之心 GMIS全球机器智能峰会；</li>
<li>Microsoft Build Tour 2017；</li>
</ul>
<ul>
<li>读+摘抄完了杨伯峻先生的《论语译注》；</li>
<li>读了一半《巨人的陨落》；</li>
</ul>
<ul>
<li>入了SONY 100ABN；</li>
<li>开了一个微信公众号没事写点无病呻吟的东西；</li>
</ul>
<p>　　干的事情还是感觉很少，效率还是极大地受到了情绪的影响。学期中之前感觉精神状态一直都还比较稳定，五月中旬到期末这段时间非常非常非常丧，生活失去了期待。但是还好有后面的期末考试（我第一次这么感激期末复习的到来），整个人还好没有这么堕落下去。</p>
<hr>
<p>既然不能去实习，那就还是按照原先想的那样，继续让自己变得更好吧，把数据结构和算法弄一弄，再多了解和熟悉一下python，机器学习的部分也还需要继续提高。所以接下来的小学期和暑假，主要就是</p>
<ul>
<li>《数据结构与算法分析：C语言描述》+ MOOC，把数据结构和算法弄一下；</li>
<li>考虑看看《流畅的Python》;</li>
<li>《机器学习基石》；</li>
<li>《集体智慧编程》、《机器学习实战》</li>
<li>复习数理统计，考虑看看课本和陈希孺的书；</li>
<li>看看《陶哲轩实分析》；</li>
<li><strong>尝试发展一些别的兴趣爱好；</strong></li>
<li><p>学学日语；<br>​</p>
<p>暂时就想到这些，大概就这样吧；</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个学期就这样结束了，简单来写个总结吧，顺便做点计划。&lt;/p&gt;
    
    </summary>
    
      <category term="学习记录" scheme="http://gabrieldrapor.github.io/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="Plans" scheme="http://gabrieldrapor.github.io/tags/Plans/"/>
    
      <category term="Paths" scheme="http://gabrieldrapor.github.io/tags/Paths/"/>
    
  </entry>
  
  <entry>
    <title>来写个学期总结吧</title>
    <link href="http://gabrieldrapor.github.io/2017/07/01/170701_term-summary/"/>
    <id>http://gabrieldrapor.github.io/2017/07/01/170701_term-summary/</id>
    <published>2017-07-01T00:00:00.000Z</published>
    <updated>2017-08-06T03:36:37.197Z</updated>
    
    <content type="html"><![CDATA[<p>这个学期就这样结束了，简单来写个总结吧，顺便做点计划。</p>
<a id="more"></a>
<hr>
<ul>
<li>看完了Coursera上Andrew Ng的Machine Learning；完成相应作业；</li>
<li>读周志华先生的《机器学习》，但还有几章没读完；</li>
<li>为了解决一些疑问，用Python写过几个小爬虫；</li>
<li>看完了《SQL必知必会》，细致地学习了一波SQL；</li>
<li>《利用Python进行数据分析》看了小半本，学习了一些Numpy和pandas的用法，用Jupyter Notebook做了笔记；</li>
<li>学了一点PyQt5；</li>
</ul>
<ul>
<li>学习了数理统计、偏微分方程、实变函数与泛函分析、数学模型和复变函数与积分变换这几门课，总的来说每门课都还是很有意思的，惭愧的是我下的工夫还是太少；</li>
</ul>
<ul>
<li>开始学习日语，背完了五十音图；</li>
</ul>
<ul>
<li>参加了一次校赛建模，本来是想用numpy和pandas替代MATLAB，结果发现还是不行，于是就顺便增强了一下MATLAB方面的技能，但做得很随意，最后得了二等奖；</li>
<li>报名参加了2017中国高校计算机大赛—大数据挑战赛；</li>
</ul>
<ul>
<li>刷了几波实习信息，也投了一波简历，结果最后发现了一些意外的情况（其实是操作失误），导致估计假期的实习期待落空了；</li>
<li>这两天考完试把双系统弄好了，Ubuntu+Win10，尽量把和编程开发有关的事情都移到Ubuntu里做，WIn10留作娱乐，希望下一次换系统是Mac OS；</li>
</ul>
<hr>
<ul>
<li>《Planet Earth II》</li>
<li>《嫌疑人X的献身》（中国版）</li>
<li>《人民的名义》</li>
<li>《驴得水》</li>
<li>《看不见的客人》</li>
<li>《百鸟朝凤》</li>
<li>《摔跤吧！爸爸 Dangal》</li>
<li>《TBBT Season 10》</li>
<li>《和食双神：最后的约定》</li>
<li>《四重奏》</li>
<li>《辩护人》</li>
<li>《求婚大作战》</li>
<li>《Silcon Valley Season 4》</li>
<li>《伊斯坦布尔的猫/Kedi》</li>
<li>《Elementary Season 5》</li>
<li>《The Flash Season 3》</li>
<li>《S.H.I.E.L.D. Season 4》</li>
</ul>
<ul>
<li>机器之心 GMIS全球机器智能峰会；</li>
<li>Microsoft Build Tour 2017；</li>
</ul>
<ul>
<li>读+摘抄完了杨伯峻先生的《论语译注》；</li>
<li>读了一半《巨人的陨落》；</li>
</ul>
<ul>
<li>入了SONY 100ABN；</li>
<li>开了一个微信公众号没事写点无病呻吟的东西；</li>
</ul>
<p>　　干的事情还是感觉很少，效率还是极大地受到了情绪的影响。学期中之前感觉精神状态一直都还比较稳定，五月中旬到期末这段时间非常非常非常丧，生活失去了期待。但是还好有后面的期末考试（我第一次这么感激期末复习的到来），整个人还好没有这么堕落下去。</p>
<hr>
<p>既然不能去实习，那就还是按照原先想的那样，继续让自己变得更好吧，把数据结构和算法弄一弄，再多了解和熟悉一下python，机器学习的部分也还需要继续提高。所以接下来的小学期和暑假，主要就是</p>
<ul>
<li>《数据结构与算法分析：C语言描述》+ MOOC，把数据结构和算法弄一下；</li>
<li>考虑看看《流畅的Python》;</li>
<li>《机器学习基石》；</li>
<li>《集体智慧编程》、《机器学习实战》</li>
<li>复习数理统计，考虑看看课本和陈希孺的书；</li>
<li>看看《陶哲轩实分析》；</li>
<li><strong>尝试发展一些别的兴趣爱好；</strong></li>
<li><p>学学日语；<br>​</p>
<p>暂时就想到这些，大概就这样吧；</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个学期就这样结束了，简单来写个总结吧，顺便做点计划。&lt;/p&gt;
    
    </summary>
    
      <category term="学习记录" scheme="http://gabrieldrapor.github.io/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="Plans" scheme="http://gabrieldrapor.github.io/tags/Plans/"/>
    
      <category term="Paths" scheme="http://gabrieldrapor.github.io/tags/Paths/"/>
    
  </entry>
  
  <entry>
    <title>pandas笔记</title>
    <link href="http://gabrieldrapor.github.io/2017/06/14/posts/170614-pandas/"/>
    <id>http://gabrieldrapor.github.io/2017/06/14/posts/170614-pandas/</id>
    <published>2017-06-14T00:00:00.000Z</published>
    <updated>2017-08-19T05:48:31.946Z</updated>
    
    <content type="html"><![CDATA[<p>看书时顺手用Jupyter Notebook做的笔记。</p>
<p>并不是全部，后面还有一些用法实在是不想啃了，等用到再来学吧……</p>
<p class="article-more-link"><a href="/python_data_analysis/pandas.html">Read More</a></p>



]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看书时顺手用Jupyter Notebook做的笔记。&lt;/p&gt;
&lt;p&gt;并不是全部，后面还有一些用法实在是不想啃了，等用到再来学吧……&lt;/p&gt;
&lt;p class=&quot;article-more-link&quot;&gt;&lt;a href=&quot;/python_data_analysis/pandas
    
    </summary>
    
      <category term="pandas" scheme="http://gabrieldrapor.github.io/categories/pandas/"/>
    
    
      <category term="Python" scheme="http://gabrieldrapor.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>pandas笔记</title>
    <link href="http://gabrieldrapor.github.io/2017/06/14/170614-pandas/"/>
    <id>http://gabrieldrapor.github.io/2017/06/14/170614-pandas/</id>
    <published>2017-06-14T00:00:00.000Z</published>
    <updated>2017-08-06T03:36:37.573Z</updated>
    
    <content type="html"><![CDATA[<p>看书时顺手用Jupyter Notebook做的笔记。</p>
<p>并不是全部，后面还有一些用法实在是不想啃了，等用到再来学吧……</p>
<p class="article-more-link"><a href="/python_data_analysis/pandas.html">Read More</a></p>



]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看书时顺手用Jupyter Notebook做的笔记。&lt;/p&gt;
&lt;p&gt;并不是全部，后面还有一些用法实在是不想啃了，等用到再来学吧……&lt;/p&gt;
&lt;p class=&quot;article-more-link&quot;&gt;&lt;a href=&quot;/python_data_analysis/pandas
    
    </summary>
    
      <category term="pandas" scheme="http://gabrieldrapor.github.io/categories/pandas/"/>
    
    
      <category term="Python" scheme="http://gabrieldrapor.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Machine Learning Notes 07</title>
    <link href="http://gabrieldrapor.github.io/2017/06/01/posts/170601_ml_notes7/"/>
    <id>http://gabrieldrapor.github.io/2017/06/01/posts/170601_ml_notes7/</id>
    <published>2017-06-01T00:00:00.000Z</published>
    <updated>2017-08-19T05:48:31.690Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What-should-we-do-if-we-have-a-bad-predictions"><a href="#What-should-we-do-if-we-have-a-bad-predictions" class="headerlink" title="What should we do if we have a bad predictions?"></a>What should we do if we have a bad predictions?</h2><p>The following options may be feasible:</p>
<ul>
<li>Get more training examples;</li>
<li>Try smaller sets of features;</li>
<li>Try getting additional features;</li>
<li>Try adding polynomial features (increasing degree of polynomial);</li>
<li>Try decreasing $\lambda$;</li>
<li>Try increasing $\lambda$;</li>
</ul>
<p>So we can take a kind of test called <strong>machine learning diagnostic</strong> to insight what is/isn’t working with a learning algorithm, and gain guidance as to how best to improve its performance. It may take time to implement, but doing so can be vary good use of your time.</p>
<a id="more"></a>
<hr>
<h2 id="Evaluating-a-hypothesis"><a href="#Evaluating-a-hypothesis" class="headerlink" title="Evaluating a hypothesis"></a>Evaluating a hypothesis</h2><p>To evaluating whether a hypothesis is good or bad (and we don’t have extra test set), we can divide our training set at first to two parts (usually according to 7/3 proportion), and one for training, the other for testing, which helps us to avoid <strong>over fitting</strong> (perform on training set well, but bad on new examples not in training set)</p>
<hr>
<h2 id="Model-Selection"><a href="#Model-Selection" class="headerlink" title="Model Selection"></a>Model Selection</h2><p>Take linear regression as a example, we use $h_{\theta}(x) = \theta_0 +\theta_1 x + \theta_2 x^2 +… $ as our hypothesis function, and we can add the degree of polynomial to make our hypothe/.sis better, but it may brings the over fitting problem, so we need to find out the best degree.</p>
<p>To  achieve so, we can compute the $J_{test}$(cost of different degrees $d$ on test set), and choose the best $d$, but it’s only fit to the test set. So we divide the data set into three parts:</p>
<ul>
<li>training set (60% usually)</li>
<li>cross validation set (20% usually) </li>
<li>test set (20% usually)(check if the combo of $\theta$ and $\lambda$ has a good generalization of the problem, avoiding over fitting)</li>
</ul>
<p>and three kinds of cost function is $J_{train}$, $J_{cv}$, $J_{test}$.</p>
<p>Then for different $d(d=1, 2, 3, …)$, minimize $J(\theta)$ with $J_{train}$ and $J_{test}$, then compute the $J_{cv}$ for each $d$. We choose $d$ who has the lowest $J_{cv}$, and that.s how we do the model selection.</p>
<hr>
<h2 id="Bias-vs-Variance"><a href="#Bias-vs-Variance" class="headerlink" title="Bias vs. Variance"></a>Bias vs. Variance</h2><ul>
<li><img src="http://7xugq7.com1.z0.glb.clouddn.com/bias_vs_var.JPG"></li>
</ul>
<h3 id="Diagnosing-bias-vs-variance"><a href="#Diagnosing-bias-vs-variance" class="headerlink" title="Diagnosing bias vs. variance"></a>Diagnosing bias vs. variance</h3><ul>
<li>If $J_{train}$ is high and $J_{cv}\approx J_{train}$, we can tell it’s a <strong>bias</strong> problem;</li>
<li>If $J_{train}$ is low and $J_{cv}\gg J_{train}$, we can tell it’s a <strong>variance</strong> problem;</li>
</ul>
<hr>
<h2 id="About-regularization"><a href="#About-regularization" class="headerlink" title="About regularization"></a>About regularization</h2><p>As we know, appropriate $\lambda$ (regularization parameter) can help to prevent over fitting, but when the $\lambda$ is too large or too small. it won’t work as so:</p>
<p><img src="http://7xugq7.com1.z0.glb.clouddn.com/different_lambda.JPG"></p>
<p>So choosing appropriate value of $\lambda$ is very necessary. </p>
<p>We can try different $\lambda$, minimize $J(\theta)$, then compute $J_{cv}$ (like what we do the model selection), and we can finf the best $\lambda$.</p>
<hr>
<h2 id="Learning-Curves"><a href="#Learning-Curves" class="headerlink" title="Learning Curves"></a>Learning Curves</h2><p>The learning curves describe the relationship of $m$(training set size) and error($J_{cv},J_{train}$), it’s look like:</p>
<p><img src="http://7xugq7.com1.z0.glb.clouddn.com/learningcurves.JPG" width="500"></p>
<p>And if the algorithm is suffering from high bias, the learning curve is look like:</p>
<p><img src="http://7xugq7.com1.z0.glb.clouddn.com/high_bias_curve.JPG" width="500"></p>
<p>We can see from the graph that the increasing $m$ doesn’t help to lower the bias, so we can conclude that getting more training data will not help to solve high-bias problem.</p>
<p>While if the algorithm is suffering from high variance, the learning curve is look like:</p>
<p><img src="http://7xugq7.com1.z0.glb.clouddn.com/high_var_curve.JPG" width="500"></p>
<p>From the graph we can see that there is a gap between $J_{cv}$ and $J_{train}$, and as $m$ increasing, the gap diminishes and the bias is also decreasing. So we can conclude that getting more training data is helpful to solve the high-variance problem.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;What-should-we-do-if-we-have-a-bad-predictions&quot;&gt;&lt;a href=&quot;#What-should-we-do-if-we-have-a-bad-predictions&quot; class=&quot;headerlink&quot; title=&quot;What should we do if we have a bad predictions?&quot;&gt;&lt;/a&gt;What should we do if we have a bad predictions?&lt;/h2&gt;&lt;p&gt;The following options may be feasible:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Get more training examples;&lt;/li&gt;
&lt;li&gt;Try smaller sets of features;&lt;/li&gt;
&lt;li&gt;Try getting additional features;&lt;/li&gt;
&lt;li&gt;Try adding polynomial features (increasing degree of polynomial);&lt;/li&gt;
&lt;li&gt;Try decreasing $\lambda$;&lt;/li&gt;
&lt;li&gt;Try increasing $\lambda$;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So we can take a kind of test called &lt;strong&gt;machine learning diagnostic&lt;/strong&gt; to insight what is/isn’t working with a learning algorithm, and gain guidance as to how best to improve its performance. It may take time to implement, but doing so can be vary good use of your time.&lt;/p&gt;
    
    </summary>
    
      <category term="Machine Learning" scheme="http://gabrieldrapor.github.io/categories/Machine-Learning/"/>
    
    
      <category term="Machine Learning" scheme="http://gabrieldrapor.github.io/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Machine Learning Notes 07</title>
    <link href="http://gabrieldrapor.github.io/2017/06/01/170601_ml_notes7/"/>
    <id>http://gabrieldrapor.github.io/2017/06/01/170601_ml_notes7/</id>
    <published>2017-06-01T00:00:00.000Z</published>
    <updated>2017-08-06T03:36:42.968Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What-should-we-do-if-we-have-a-bad-predictions"><a href="#What-should-we-do-if-we-have-a-bad-predictions" class="headerlink" title="What should we do if we have a bad predictions?"></a>What should we do if we have a bad predictions?</h2><p>The following options may be feasible:</p>
<ul>
<li>Get more training examples;</li>
<li>Try smaller sets of features;</li>
<li>Try getting additional features;</li>
<li>Try adding polynomial features (increasing degree of polynomial);</li>
<li>Try decreasing $\lambda$;</li>
<li>Try increasing $\lambda$;</li>
</ul>
<p>So we can take a kind of test called <strong>machine learning diagnostic</strong> to insight what is/isn’t working with a learning algorithm, and gain guidance as to how best to improve its performance. It may take time to implement, but doing so can be vary good use of your time.</p>
<a id="more"></a>
<hr>
<h2 id="Evaluating-a-hypothesis"><a href="#Evaluating-a-hypothesis" class="headerlink" title="Evaluating a hypothesis"></a>Evaluating a hypothesis</h2><p>To evaluating whether a hypothesis is good or bad (and we don’t have extra test set), we can divide our training set at first to two parts (usually according to 7/3 proportion), and one for training, the other for testing, which helps us to avoid <strong>over fitting</strong> (perform on training set well, but bad on new examples not in training set)</p>
<hr>
<h2 id="Model-Selection"><a href="#Model-Selection" class="headerlink" title="Model Selection"></a>Model Selection</h2><p>Take linear regression as a example, we use $h_{\theta}(x) = \theta_0 +\theta_1 x + \theta_2 x^2 +… $ as our hypothesis function, and we can add the degree of polynomial to make our hypothe/.sis better, but it may brings the over fitting problem, so we need to find out the best degree.</p>
<p>To  achieve so, we can compute the $J_{test}$(cost of different degrees $d$ on test set), and choose the best $d$, but it’s only fit to the test set. So we divide the data set into three parts:</p>
<ul>
<li>training set (60% usually)</li>
<li>cross validation set (20% usually) </li>
<li>test set (20% usually)(check if the combo of $\theta$ and $\lambda$ has a good generalization of the problem, avoiding over fitting)</li>
</ul>
<p>and three kinds of cost function is $J_{train}$, $J_{cv}$, $J_{test}$.</p>
<p>Then for different $d(d=1, 2, 3, …)$, minimize $J(\theta)$ with $J_{train}$ and $J_{test}$, then compute the $J_{cv}$ for each $d$. We choose $d$ who has the lowest $J_{cv}$, and that.s how we do the model selection.</p>
<hr>
<h2 id="Bias-vs-Variance"><a href="#Bias-vs-Variance" class="headerlink" title="Bias vs. Variance"></a>Bias vs. Variance</h2><ul>
<li><img src="http://7xugq7.com1.z0.glb.clouddn.com/bias_vs_var.JPG"></li>
</ul>
<h3 id="Diagnosing-bias-vs-variance"><a href="#Diagnosing-bias-vs-variance" class="headerlink" title="Diagnosing bias vs. variance"></a>Diagnosing bias vs. variance</h3><ul>
<li>If $J_{train}$ is high and $J_{cv}\approx J_{train}$, we can tell it’s a <strong>bias</strong> problem;</li>
<li>If $J_{train}$ is low and $J_{cv}\gg J_{train}$, we can tell it’s a <strong>variance</strong> problem;</li>
</ul>
<hr>
<h2 id="About-regularization"><a href="#About-regularization" class="headerlink" title="About regularization"></a>About regularization</h2><p>As we know, appropriate $\lambda$ (regularization parameter) can help to prevent over fitting, but when the $\lambda$ is too large or too small. it won’t work as so:</p>
<p><img src="http://7xugq7.com1.z0.glb.clouddn.com/different_lambda.JPG"></p>
<p>So choosing appropriate value of $\lambda$ is very necessary. </p>
<p>We can try different $\lambda$, minimize $J(\theta)$, then compute $J_{cv}$ (like what we do the model selection), and we can finf the best $\lambda$.</p>
<hr>
<h2 id="Learning-Curves"><a href="#Learning-Curves" class="headerlink" title="Learning Curves"></a>Learning Curves</h2><p>The learning curves describe the relationship of $m$(training set size) and error($J_{cv},J_{train}$), it’s look like:</p>
<p><img src="http://7xugq7.com1.z0.glb.clouddn.com/learningcurves.JPG" width="500"></p>
<p>And if the algorithm is suffering from high bias, the learning curve is look like:</p>
<p><img src="http://7xugq7.com1.z0.glb.clouddn.com/high_bias_curve.JPG" width="500"></p>
<p>We can see from the graph that the increasing $m$ doesn’t help to lower the bias, so we can conclude that getting more training data will not help to solve high-bias problem.</p>
<p>While if the algorithm is suffering from high variance, the learning curve is look like:</p>
<p><img src="http://7xugq7.com1.z0.glb.clouddn.com/high_var_curve.JPG" width="500"></p>
<p>From the graph we can see that there is a gap between $J_{cv}$ and $J_{train}$, and as $m$ increasing, the gap diminishes and the bias is also decreasing. So we can conclude that getting more training data is helpful to solve the high-variance problem.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;What-should-we-do-if-we-have-a-bad-predictions&quot;&gt;&lt;a href=&quot;#What-should-we-do-if-we-have-a-bad-predictions&quot; class=&quot;headerlink&quot; title=&quot;What should we do if we have a bad predictions?&quot;&gt;&lt;/a&gt;What should we do if we have a bad predictions?&lt;/h2&gt;&lt;p&gt;The following options may be feasible:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Get more training examples;&lt;/li&gt;
&lt;li&gt;Try smaller sets of features;&lt;/li&gt;
&lt;li&gt;Try getting additional features;&lt;/li&gt;
&lt;li&gt;Try adding polynomial features (increasing degree of polynomial);&lt;/li&gt;
&lt;li&gt;Try decreasing $\lambda$;&lt;/li&gt;
&lt;li&gt;Try increasing $\lambda$;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So we can take a kind of test called &lt;strong&gt;machine learning diagnostic&lt;/strong&gt; to insight what is/isn’t working with a learning algorithm, and gain guidance as to how best to improve its performance. It may take time to implement, but doing so can be vary good use of your time.&lt;/p&gt;
    
    </summary>
    
      <category term="Machine Learning" scheme="http://gabrieldrapor.github.io/categories/Machine-Learning/"/>
    
    
      <category term="Machine Learning" scheme="http://gabrieldrapor.github.io/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Numpy入门笔记</title>
    <link href="http://gabrieldrapor.github.io/2017/05/11/posts/170511-numpy/"/>
    <id>http://gabrieldrapor.github.io/2017/05/11/posts/170511-numpy/</id>
    <published>2017-05-11T00:00:00.000Z</published>
    <updated>2017-08-19T05:48:31.434Z</updated>
    
    <content type="html"><![CDATA[<p>看书时顺手用Jupyter Notebook做的笔记。<br>并没有涵盖Numpy的全部用法，仅仅是入门部分的一些知识。</p>
<p class="article-more-link"><a href="http://7xugq7.com1.z0.glb.clouddn.com/NpBasic.html" target="_blank" rel="external">Read More</a></p>



]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看书时顺手用Jupyter Notebook做的笔记。&lt;br&gt;并没有涵盖Numpy的全部用法，仅仅是入门部分的一些知识。&lt;/p&gt;
&lt;p class=&quot;article-more-link&quot;&gt;&lt;a href=&quot;http://7xugq7.com1.z0.glb.clouddn.
    
    </summary>
    
      <category term="numpy" scheme="http://gabrieldrapor.github.io/categories/numpy/"/>
    
    
      <category term="Python" scheme="http://gabrieldrapor.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Numpy入门笔记</title>
    <link href="http://gabrieldrapor.github.io/2017/05/11/170511-numpy/"/>
    <id>http://gabrieldrapor.github.io/2017/05/11/170511-numpy/</id>
    <published>2017-05-11T00:00:00.000Z</published>
    <updated>2017-08-06T03:36:40.900Z</updated>
    
    <content type="html"><![CDATA[<p>看书时顺手用Jupyter Notebook做的笔记。<br>并没有涵盖Numpy的全部用法，仅仅是入门部分的一些知识。</p>
<p class="article-more-link"><a href="http://7xugq7.com1.z0.glb.clouddn.com/NpBasic.html" target="_blank" rel="external">Read More</a></p>



]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看书时顺手用Jupyter Notebook做的笔记。&lt;br&gt;并没有涵盖Numpy的全部用法，仅仅是入门部分的一些知识。&lt;/p&gt;
&lt;p class=&quot;article-more-link&quot;&gt;&lt;a href=&quot;http://7xugq7.com1.z0.glb.clouddn.
    
    </summary>
    
      <category term="numpy" scheme="http://gabrieldrapor.github.io/categories/numpy/"/>
    
    
      <category term="Python" scheme="http://gabrieldrapor.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>IPython的一些笔记</title>
    <link href="http://gabrieldrapor.github.io/2017/05/02/170502_ipython/"/>
    <id>http://gabrieldrapor.github.io/2017/05/02/170502_ipython/</id>
    <published>2017-05-02T00:00:00.000Z</published>
    <updated>2017-08-06T03:36:33.261Z</updated>
    
    <content type="html"><![CDATA[<p>最近在看《利用Python进行数据分析》…</p>
<p>·</p><p class="article-more-link"><a href="/python_data_analysis/IPython.html">Read More</a></p><p></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在看《利用Python进行数据分析》…&lt;/p&gt;
&lt;p&gt;·&lt;/p&gt;&lt;p class=&quot;article-more-link&quot;&gt;&lt;a href=&quot;/python_data_analysis/IPython.html&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="numpy" scheme="http://gabrieldrapor.github.io/categories/numpy/"/>
    
    
      <category term="Python" scheme="http://gabrieldrapor.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>IPython的一些笔记</title>
    <link href="http://gabrieldrapor.github.io/2017/05/02/posts/170502_ipython/"/>
    <id>http://gabrieldrapor.github.io/2017/05/02/posts/170502_ipython/</id>
    <published>2017-05-02T00:00:00.000Z</published>
    <updated>2017-08-19T05:48:30.246Z</updated>
    
    <content type="html"><![CDATA[<p>最近在看《利用Python进行数据分析》…</p>
<p>·</p><p class="article-more-link"><a href="/python_data_analysis/IPython.html">Read More</a></p><p></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在看《利用Python进行数据分析》…&lt;/p&gt;
&lt;p&gt;·&lt;/p&gt;&lt;p class=&quot;article-more-link&quot;&gt;&lt;a href=&quot;/python_data_analysis/IPython.html&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="numpy" scheme="http://gabrieldrapor.github.io/categories/numpy/"/>
    
    
      <category term="Python" scheme="http://gabrieldrapor.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>SQL Syntax(Ⅲ)</title>
    <link href="http://gabrieldrapor.github.io/2017/04/25/posts/170425_sql3/"/>
    <id>http://gabrieldrapor.github.io/2017/04/25/posts/170425_sql3/</id>
    <published>2017-04-25T00:00:00.000Z</published>
    <updated>2017-08-19T05:48:29.646Z</updated>
    
    <content type="html"><![CDATA[<p>后面储存过程、事务处理、游标和一些高级特性感觉太遥远就只是翻了翻，没作整理。</p>
<a id="more"></a>
<hr>
<h2 id="联结表"><a href="#联结表" class="headerlink" title="联结表"></a>联结表</h2><h5 id="创建联结"><a href="#创建联结" class="headerlink" title="创建联结"></a>创建联结</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> vend_name, prod_name, prod_price</div><div class="line"><span class="keyword">FROM</span> Venders, Products</div><div class="line"><span class="keyword">WHERE</span> Venders.vend_id = Products.id</div></pre></td></tr></table></figure>
<p>　　简单解释一下，Venders和Products是一个数据库下的两张表，他们都有一个列叫Vend_id, prod_name和prod_price是表Products中的列，vend_name是表Venders中的列。<br>需要注意的是，如果在SELECT中添加了共有的列名，需要做完全限定，比如上面的例子中，如果需要把vend_id这个列提取出来，需要用Venders.vend_id或者Products.id来完全限定。<br>另外就是，WHERE子句非常重要，如果这里不用WHERE子句的话，输出的结果将会是指定的两部分内容的每一行的组合的结果，而忽略其中的逻辑，输出结果的行数将等于第一部分的列乘以第二个部分列的行数。这个结果也被称为<em>笛卡尔积</em>。所以，在联结表时为了避免输出的结果过长，千万不要忘了WHERE子句。</p>
<p>　　以上的联结称为等值联结(equijoin)，也称为内联结(inner join)，我们可以用内联结的写法来重新写与上面等价的SQL语句：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> vend_name, prod_name, prod_price</div><div class="line"><span class="keyword">FROM</span> Venders <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Products</div><div class="line"> <span class="keyword">ON</span> Venders.vend_id = Products.id</div></pre></td></tr></table></figure>
<p>　　实际上，联结表的操作也可以用子查询完成，但SQL语句书写起来会麻烦许多。</p>
<hr>
<h2 id="创建高级联结"><a href="#创建高级联结" class="headerlink" title="创建高级联结"></a>创建高级联结</h2><h5 id="使用表别名"><a href="#使用表别名" class="headerlink" title="使用表别名"></a>使用表别名</h5><p>  表别名还有以下这种有趣的用法：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> cust_name, cust_contract</div><div class="line"><span class="keyword">FROM</span> Customers <span class="keyword">AS</span> C, Orders <span class="keyword">AS</span> O, OrderItems <span class="keyword">AS</span> OI</div><div class="line"><span class="keyword">WHERE</span> C.cust_id = O.cust_id</div><div class="line"> <span class="keyword">AND</span> OI.order_num = O.order_num</div><div class="line"> <span class="keyword">AND</span> prod_id = <span class="string">'RGAN01'</span></div></pre></td></tr></table></figure>
<p>P.S.:Oracle中没有AS这个用法</p>
<h5 id="其他类型的联结"><a href="#其他类型的联结" class="headerlink" title="其他类型的联结"></a>其他类型的联结</h5><ul>
<li>自联结(self-join)<br>   使用别名的好处在于可以不止一次地引用同一个表。下面两段SQL语句是等价的：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> cest_id, cust_name, cust_contact</div><div class="line"><span class="keyword">FROM</span> Customers</div><div class="line"><span class="keyword">WHERE</span> cust_name = (<span class="keyword">SELECT</span> cust_name</div><div class="line">                   <span class="keyword">FROM</span> Customers</div><div class="line">                   <span class="keyword">WHERE</span> cust_contact = <span class="string">'Jim Jones'</span>);</div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> c1.cust_id, c1.cust_name, c1.cust_contact</div><div class="line"><span class="keyword">FROM</span> Customers <span class="keyword">AS</span> c1, Customers <span class="keyword">AS</span> c2</div><div class="line"><span class="keyword">WHERE</span> c1.cust_name = c2.cust_name</div><div class="line"> <span class="keyword">AND</span> c2.cust_contract = <span class="string">'Jim Jones'</span>;</div></pre></td></tr></table></figure>
<p>　　第一段使用了子查询,而第二段使用了联结，他们的效果是一样的，但在许多DBMS中，处理联结远比子查询快得多。
　　</p>
<ul>
<li><p>自然联结(natural join)</p>
<p>  标准的联结返回所有的数据，相同的列甚至多次出现。自然联结排除多次出现，使每一列只返回一次。如：</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> C.*, O.order_num, O.order_date,</div><div class="line">       OI.prod_id, OI.quantity, OI.item_price</div><div class="line"><span class="keyword">FROM</span> Customers <span class="keyword">AS</span> C, Orders <span class="keyword">AS</span> O, OrderItems <span class="keyword">AS</span> OI</div><div class="line"><span class="keyword">WHERE</span> C.cust_id = O.cust_id</div><div class="line"> <span class="keyword">AND</span> OI.order_num = O.order_num</div><div class="line"> <span class="keyword">AND</span> prod_id = <span class="string">'RGAN01'</span>;</div></pre></td></tr></table></figure>
<ul>
<li>外联结<br>包含在相关表中没有关联行的行的联结，称为外联结(outer join)。用法如：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> Customers.cust_id, Orders.order_num</div><div class="line"><span class="keyword">FROM</span> Customers <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> Orders</div><div class="line"> <span class="keyword">ON</span> Customers.cust_id = Orders.cust_id;</div></pre></td></tr></table></figure>
<p>注意，OUT JOIN前必须使用RIGHT或者LEFT关键字制定包括其所有行的表（RIGHT指出的是OUTER JOIN了FROM中右边的表，LEFT同理）。</p>
<ul>
<li>全外联结<br>检索两个表中的所有行并关联那些可以关联的行，这种外联结称为全外联结(full outer join),如：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> Customers.cust_id, Orders.order_num</div><div class="line"><span class="keyword">FROM</span> Customers <span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> Orders</div><div class="line"> <span class="keyword">ON</span> Customers.cust_id = Orders.cust_id;</div></pre></td></tr></table></figure>
<p>当然，也可以在联结中使用聚集函数。</p>
<hr>
<h2 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h2><p>SQL允许执行多个查询（多条SELECT语句），并将结果作为一个查询结果集返回。这些组合查询通常称为并(union)或复制查询(compound query)</p>
<h5 id="使用UNION"><a href="#使用UNION" class="headerlink" title="使用UNION"></a>使用UNION</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> cust_name, cust_contact, cust_email</div><div class="line"><span class="keyword">FROM</span> Customers</div><div class="line"><span class="keyword">WHERE</span> cust_state <span class="keyword">IN</span> (<span class="string">'IL'</span>, <span class="string">'IN'</span>, <span class="string">'MI'</span>)</div><div class="line"><span class="keyword">UNION</span></div><div class="line"><span class="keyword">SELECT</span> cust_name, cust_contact, cust_email</div><div class="line"><span class="keyword">FROM</span> Customers</div><div class="line"><span class="keyword">WHERE</span> cust_name = <span class="string">'Fun4All'</span>;</div></pre></td></tr></table></figure>
<p>　　当然这里可以用OR达成同样的效果，但对于较复杂的过滤条件，或者从多个表检索数据的情形，使用UNION可能会使处理更简单。另外需要注意,UNION每个查询必须包含相同的列，表达式或聚集函数。</p>
<p>　　此外，UNION会默认自动取消重复的行，当然如果有需要，也可以改变它，使用UNION ALL即可。如果需要对组合查询的结果进行排序，只需要在最后加上ORDER BY即可。</p>
<hr>
<h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><h5 id="使用INSERT"><a href="#使用INSERT" class="headerlink" title="使用INSERT"></a>使用INSERT</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name</div><div class="line"><span class="keyword">VALUES</span>(<span class="keyword">Value</span> <span class="number">1</span>,</div><div class="line">       <span class="keyword">Value</span> <span class="number">2</span>,</div><div class="line">       <span class="keyword">Value</span> <span class="number">3</span>,</div><div class="line">       ......);</div></pre></td></tr></table></figure>
<p>　　这种用法很简单，但并不安全，应该尽量避免使用。更安全（也更烦琐）的用法应当是：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name(column1,</div><div class="line">                       column2,</div><div class="line">                       column3,</div><div class="line">                       ......)</div><div class="line"><span class="keyword">VALUES</span>(<span class="keyword">Value</span> <span class="number">1</span>,</div><div class="line">       <span class="keyword">Value</span> <span class="number">2</span>,</div><div class="line">       <span class="keyword">Value</span> <span class="number">3</span>,</div><div class="line">       ......);</div></pre></td></tr></table></figure>
<p>　　Values将以指定的次序匹配指定的列名，不一定按各列出现在表中的实际次序。其优点是，即使表的结构改变，这条INSERT仍然能正确工作。
　　</p>
<h5 id="插入检索出的数据"><a href="#插入检索出的数据" class="headerlink" title="插入检索出的数据"></a>插入检索出的数据</h5><p>　　INSERT还存在另一种形式，可以利用它将SELECT语句的结果插入表中，这就是所谓的INSERT SELECT，如：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name(column1,</div><div class="line">                       column2,</div><div class="line">                       column3,</div><div class="line">                       ......)</div><div class="line"><span class="keyword">SELECT</span> column_a,</div><div class="line">       column_b,</div><div class="line">       column_c,</div><div class="line">       ......</div><div class="line"><span class="keyword">FROM</span> another_table_name;</div></pre></td></tr></table></figure>
<p>　　当然，利用INSERT SELECT，可以实现从一个表复制到另一个表：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> *</div><div class="line"><span class="keyword">INTO</span> table1</div><div class="line"><span class="keyword">FROM</span> table2;</div></pre></td></tr></table></figure></p>
<p>在MariaDB, MySQL, Oracle, PostgreSQL 和 SQLite 使用的用法稍有不同：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table1 <span class="keyword">AS</span></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table2;</div></pre></td></tr></table></figure>
<hr>
<h2 id="更新和删除数据"><a href="#更新和删除数据" class="headerlink" title="更新和删除数据"></a>更新和删除数据</h2><h5 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">UPDATE</span> table_name</div><div class="line"><span class="keyword">SET</span> column1=value1,</div><div class="line">    column2=value2,</div><div class="line">    ......</div><div class="line"><span class="keyword">WHERE</span> certain_column = certain_value;</div></pre></td></tr></table></figure>
<h5 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name</div><div class="line"><span class="keyword">WHERE</span> ......</div></pre></td></tr></table></figure>
<hr>
<h2 id="创建和操纵表"><a href="#创建和操纵表" class="headerlink" title="创建和操纵表"></a>创建和操纵表</h2><h5 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name</div><div class="line">(</div><div class="line">    column1_name	column_type		<span class="literal">NULL</span>/<span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">    column2_name	column_type		<span class="literal">NULL</span>/<span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">    column2_name	column_type		<span class="literal">NULL</span>/<span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">    ......</div><div class="line">);</div></pre></td></tr></table></figure>
<p>其中，NULL是默认设置，可以省略。</p>
<h5 id="指定默认值"><a href="#指定默认值" class="headerlink" title="指定默认值"></a>指定默认值</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name</div><div class="line">(</div><div class="line">    column1_name  column_type  <span class="literal">NULL</span>/<span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> [<span class="keyword">value</span>],</div><div class="line">    column2_name  column_type  <span class="literal">NULL</span>/<span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> [<span class="keyword">value</span>],</div><div class="line">    column2_name  column_type  <span class="literal">NULL</span>/<span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> [<span class="keyword">value</span>],</div><div class="line">    ......</div><div class="line">);</div></pre></td></tr></table></figure>
<p>在实际中，常用的默认值会用到当前时间。</p>
<table>
<thead>
<tr>
<th style="text-align:center">DBMS</th>
<th style="text-align:center">函数/变量</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Access</td>
<td style="text-align:center">NOW()</td>
</tr>
<tr>
<td style="text-align:center">DB2</td>
<td style="text-align:center">CURRENT_DATE</td>
</tr>
<tr>
<td style="text-align:center">MySQL</td>
<td style="text-align:center">CURRENT_DATE()</td>
</tr>
<tr>
<td style="text-align:center">Oracle</td>
<td style="text-align:center">SYSDATE</td>
</tr>
<tr>
<td style="text-align:center">PostgreSQL</td>
<td style="text-align:center">CURRENT_DATE</td>
</tr>
<tr>
<td style="text-align:center">SQL Server</td>
<td style="text-align:center">GETDATE()</td>
</tr>
<tr>
<td style="text-align:center">SQLite</td>
<td style="text-align:center">date(‘now’)</td>
</tr>
</tbody>
</table>
<h5 id="更新表"><a href="#更新表" class="headerlink" title="更新表"></a>更新表</h5><p>以下展示了添加和删除列的用法：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name</div><div class="line"><span class="keyword">ADD</span> column_name column_type;</div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name</div><div class="line"><span class="keyword">DROP</span> column_name;</div></pre></td></tr></table></figure>
<h5 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> table_name;</div></pre></td></tr></table></figure>
<hr>
<h2 id="使用视图"><a href="#使用视图" class="headerlink" title="使用视图"></a>使用视图</h2><p>视图(View)，其实就是封装起来的查询操作。【使用视图的好处大约就和贯彻面向对象思想的好处一样多。】</p>
<h5 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> view_name <span class="keyword">AS</span></div><div class="line">.....</div><div class="line">[<span class="keyword">SQL</span> <span class="keyword">Query</span>]</div><div class="line">.....</div></pre></td></tr></table></figure>
<p>之后需要再次执行该查询操作时，只需要直接用<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> column1,column2,...</div><div class="line"><span class="keyword">FROM</span> view_name</div><div class="line"><span class="keyword">WHERE</span> ...</div></pre></td></tr></table></figure></p>
<p>即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;后面储存过程、事务处理、游标和一些高级特性感觉太遥远就只是翻了翻，没作整理。&lt;/p&gt;
    
    </summary>
    
      <category term="SQL" scheme="http://gabrieldrapor.github.io/categories/SQL/"/>
    
    
      <category term="SQL" scheme="http://gabrieldrapor.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>SQL Syntax(Ⅲ)</title>
    <link href="http://gabrieldrapor.github.io/2017/04/25/170425_sql3/"/>
    <id>http://gabrieldrapor.github.io/2017/04/25/170425_sql3/</id>
    <published>2017-04-25T00:00:00.000Z</published>
    <updated>2017-08-06T03:36:36.485Z</updated>
    
    <content type="html"><![CDATA[<p>后面储存过程、事务处理、游标和一些高级特性感觉太遥远就只是翻了翻，没作整理。</p>
<a id="more"></a>
<hr>
<h2 id="联结表"><a href="#联结表" class="headerlink" title="联结表"></a>联结表</h2><h5 id="创建联结"><a href="#创建联结" class="headerlink" title="创建联结"></a>创建联结</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> vend_name, prod_name, prod_price</div><div class="line"><span class="keyword">FROM</span> Venders, Products</div><div class="line"><span class="keyword">WHERE</span> Venders.vend_id = Products.id</div></pre></td></tr></table></figure>
<p>　　简单解释一下，Venders和Products是一个数据库下的两张表，他们都有一个列叫Vend_id, prod_name和prod_price是表Products中的列，vend_name是表Venders中的列。<br>需要注意的是，如果在SELECT中添加了共有的列名，需要做完全限定，比如上面的例子中，如果需要把vend_id这个列提取出来，需要用Venders.vend_id或者Products.id来完全限定。<br>另外就是，WHERE子句非常重要，如果这里不用WHERE子句的话，输出的结果将会是指定的两部分内容的每一行的组合的结果，而忽略其中的逻辑，输出结果的行数将等于第一部分的列乘以第二个部分列的行数。这个结果也被称为<em>笛卡尔积</em>。所以，在联结表时为了避免输出的结果过长，千万不要忘了WHERE子句。</p>
<p>　　以上的联结称为等值联结(equijoin)，也称为内联结(inner join)，我们可以用内联结的写法来重新写与上面等价的SQL语句：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> vend_name, prod_name, prod_price</div><div class="line"><span class="keyword">FROM</span> Venders <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Products</div><div class="line"> <span class="keyword">ON</span> Venders.vend_id = Products.id</div></pre></td></tr></table></figure>
<p>　　实际上，联结表的操作也可以用子查询完成，但SQL语句书写起来会麻烦许多。</p>
<hr>
<h2 id="创建高级联结"><a href="#创建高级联结" class="headerlink" title="创建高级联结"></a>创建高级联结</h2><h5 id="使用表别名"><a href="#使用表别名" class="headerlink" title="使用表别名"></a>使用表别名</h5><p>  表别名还有以下这种有趣的用法：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> cust_name, cust_contract</div><div class="line"><span class="keyword">FROM</span> Customers <span class="keyword">AS</span> C, Orders <span class="keyword">AS</span> O, OrderItems <span class="keyword">AS</span> OI</div><div class="line"><span class="keyword">WHERE</span> C.cust_id = O.cust_id</div><div class="line"> <span class="keyword">AND</span> OI.order_num = O.order_num</div><div class="line"> <span class="keyword">AND</span> prod_id = <span class="string">'RGAN01'</span></div></pre></td></tr></table></figure>
<p>P.S.:Oracle中没有AS这个用法</p>
<h5 id="其他类型的联结"><a href="#其他类型的联结" class="headerlink" title="其他类型的联结"></a>其他类型的联结</h5><ul>
<li>自联结(self-join)<br>   使用别名的好处在于可以不止一次地引用同一个表。下面两段SQL语句是等价的：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> cest_id, cust_name, cust_contact</div><div class="line"><span class="keyword">FROM</span> Customers</div><div class="line"><span class="keyword">WHERE</span> cust_name = (<span class="keyword">SELECT</span> cust_name</div><div class="line">                   <span class="keyword">FROM</span> Customers</div><div class="line">                   <span class="keyword">WHERE</span> cust_contact = <span class="string">'Jim Jones'</span>);</div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> c1.cust_id, c1.cust_name, c1.cust_contact</div><div class="line"><span class="keyword">FROM</span> Customers <span class="keyword">AS</span> c1, Customers <span class="keyword">AS</span> c2</div><div class="line"><span class="keyword">WHERE</span> c1.cust_name = c2.cust_name</div><div class="line"> <span class="keyword">AND</span> c2.cust_contract = <span class="string">'Jim Jones'</span>;</div></pre></td></tr></table></figure>
<p>　　第一段使用了子查询,而第二段使用了联结，他们的效果是一样的，但在许多DBMS中，处理联结远比子查询快得多。
　　</p>
<ul>
<li><p>自然联结(natural join)</p>
<p>  标准的联结返回所有的数据，相同的列甚至多次出现。自然联结排除多次出现，使每一列只返回一次。如：</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> C.*, O.order_num, O.order_date,</div><div class="line">       OI.prod_id, OI.quantity, OI.item_price</div><div class="line"><span class="keyword">FROM</span> Customers <span class="keyword">AS</span> C, Orders <span class="keyword">AS</span> O, OrderItems <span class="keyword">AS</span> OI</div><div class="line"><span class="keyword">WHERE</span> C.cust_id = O.cust_id</div><div class="line"> <span class="keyword">AND</span> OI.order_num = O.order_num</div><div class="line"> <span class="keyword">AND</span> prod_id = <span class="string">'RGAN01'</span>;</div></pre></td></tr></table></figure>
<ul>
<li>外联结<br>包含在相关表中没有关联行的行的联结，称为外联结(outer join)。用法如：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> Customers.cust_id, Orders.order_num</div><div class="line"><span class="keyword">FROM</span> Customers <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> Orders</div><div class="line"> <span class="keyword">ON</span> Customers.cust_id = Orders.cust_id;</div></pre></td></tr></table></figure>
<p>注意，OUT JOIN前必须使用RIGHT或者LEFT关键字制定包括其所有行的表（RIGHT指出的是OUTER JOIN了FROM中右边的表，LEFT同理）。</p>
<ul>
<li>全外联结<br>检索两个表中的所有行并关联那些可以关联的行，这种外联结称为全外联结(full outer join),如：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> Customers.cust_id, Orders.order_num</div><div class="line"><span class="keyword">FROM</span> Customers <span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> Orders</div><div class="line"> <span class="keyword">ON</span> Customers.cust_id = Orders.cust_id;</div></pre></td></tr></table></figure>
<p>当然，也可以在联结中使用聚集函数。</p>
<hr>
<h2 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h2><p>SQL允许执行多个查询（多条SELECT语句），并将结果作为一个查询结果集返回。这些组合查询通常称为并(union)或复制查询(compound query)</p>
<h5 id="使用UNION"><a href="#使用UNION" class="headerlink" title="使用UNION"></a>使用UNION</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> cust_name, cust_contact, cust_email</div><div class="line"><span class="keyword">FROM</span> Customers</div><div class="line"><span class="keyword">WHERE</span> cust_state <span class="keyword">IN</span> (<span class="string">'IL'</span>, <span class="string">'IN'</span>, <span class="string">'MI'</span>)</div><div class="line"><span class="keyword">UNION</span></div><div class="line"><span class="keyword">SELECT</span> cust_name, cust_contact, cust_email</div><div class="line"><span class="keyword">FROM</span> Customers</div><div class="line"><span class="keyword">WHERE</span> cust_name = <span class="string">'Fun4All'</span>;</div></pre></td></tr></table></figure>
<p>　　当然这里可以用OR达成同样的效果，但对于较复杂的过滤条件，或者从多个表检索数据的情形，使用UNION可能会使处理更简单。另外需要注意,UNION每个查询必须包含相同的列，表达式或聚集函数。</p>
<p>　　此外，UNION会默认自动取消重复的行，当然如果有需要，也可以改变它，使用UNION ALL即可。如果需要对组合查询的结果进行排序，只需要在最后加上ORDER BY即可。</p>
<hr>
<h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><h5 id="使用INSERT"><a href="#使用INSERT" class="headerlink" title="使用INSERT"></a>使用INSERT</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name</div><div class="line"><span class="keyword">VALUES</span>(<span class="keyword">Value</span> <span class="number">1</span>,</div><div class="line">       <span class="keyword">Value</span> <span class="number">2</span>,</div><div class="line">       <span class="keyword">Value</span> <span class="number">3</span>,</div><div class="line">       ......);</div></pre></td></tr></table></figure>
<p>　　这种用法很简单，但并不安全，应该尽量避免使用。更安全（也更烦琐）的用法应当是：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name(column1,</div><div class="line">                       column2,</div><div class="line">                       column3,</div><div class="line">                       ......)</div><div class="line"><span class="keyword">VALUES</span>(<span class="keyword">Value</span> <span class="number">1</span>,</div><div class="line">       <span class="keyword">Value</span> <span class="number">2</span>,</div><div class="line">       <span class="keyword">Value</span> <span class="number">3</span>,</div><div class="line">       ......);</div></pre></td></tr></table></figure>
<p>　　Values将以指定的次序匹配指定的列名，不一定按各列出现在表中的实际次序。其优点是，即使表的结构改变，这条INSERT仍然能正确工作。
　　</p>
<h5 id="插入检索出的数据"><a href="#插入检索出的数据" class="headerlink" title="插入检索出的数据"></a>插入检索出的数据</h5><p>　　INSERT还存在另一种形式，可以利用它将SELECT语句的结果插入表中，这就是所谓的INSERT SELECT，如：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name(column1,</div><div class="line">                       column2,</div><div class="line">                       column3,</div><div class="line">                       ......)</div><div class="line"><span class="keyword">SELECT</span> column_a,</div><div class="line">       column_b,</div><div class="line">       column_c,</div><div class="line">       ......</div><div class="line"><span class="keyword">FROM</span> another_table_name;</div></pre></td></tr></table></figure>
<p>　　当然，利用INSERT SELECT，可以实现从一个表复制到另一个表：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> *</div><div class="line"><span class="keyword">INTO</span> table1</div><div class="line"><span class="keyword">FROM</span> table2;</div></pre></td></tr></table></figure></p>
<p>在MariaDB, MySQL, Oracle, PostgreSQL 和 SQLite 使用的用法稍有不同：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table1 <span class="keyword">AS</span></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table2;</div></pre></td></tr></table></figure>
<hr>
<h2 id="更新和删除数据"><a href="#更新和删除数据" class="headerlink" title="更新和删除数据"></a>更新和删除数据</h2><h5 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">UPDATE</span> table_name</div><div class="line"><span class="keyword">SET</span> column1=value1,</div><div class="line">    column2=value2,</div><div class="line">    ......</div><div class="line"><span class="keyword">WHERE</span> certain_column = certain_value;</div></pre></td></tr></table></figure>
<h5 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name</div><div class="line"><span class="keyword">WHERE</span> ......</div></pre></td></tr></table></figure>
<hr>
<h2 id="创建和操纵表"><a href="#创建和操纵表" class="headerlink" title="创建和操纵表"></a>创建和操纵表</h2><h5 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name</div><div class="line">(</div><div class="line">    column1_name	column_type		<span class="literal">NULL</span>/<span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">    column2_name	column_type		<span class="literal">NULL</span>/<span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">    column2_name	column_type		<span class="literal">NULL</span>/<span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">    ......</div><div class="line">);</div></pre></td></tr></table></figure>
<p>其中，NULL是默认设置，可以省略。</p>
<h5 id="指定默认值"><a href="#指定默认值" class="headerlink" title="指定默认值"></a>指定默认值</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name</div><div class="line">(</div><div class="line">    column1_name  column_type  <span class="literal">NULL</span>/<span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> [<span class="keyword">value</span>],</div><div class="line">    column2_name  column_type  <span class="literal">NULL</span>/<span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> [<span class="keyword">value</span>],</div><div class="line">    column2_name  column_type  <span class="literal">NULL</span>/<span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> [<span class="keyword">value</span>],</div><div class="line">    ......</div><div class="line">);</div></pre></td></tr></table></figure>
<p>在实际中，常用的默认值会用到当前时间。</p>
<table>
<thead>
<tr>
<th style="text-align:center">DBMS</th>
<th style="text-align:center">函数/变量</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Access</td>
<td style="text-align:center">NOW()</td>
</tr>
<tr>
<td style="text-align:center">DB2</td>
<td style="text-align:center">CURRENT_DATE</td>
</tr>
<tr>
<td style="text-align:center">MySQL</td>
<td style="text-align:center">CURRENT_DATE()</td>
</tr>
<tr>
<td style="text-align:center">Oracle</td>
<td style="text-align:center">SYSDATE</td>
</tr>
<tr>
<td style="text-align:center">PostgreSQL</td>
<td style="text-align:center">CURRENT_DATE</td>
</tr>
<tr>
<td style="text-align:center">SQL Server</td>
<td style="text-align:center">GETDATE()</td>
</tr>
<tr>
<td style="text-align:center">SQLite</td>
<td style="text-align:center">date(‘now’)</td>
</tr>
</tbody>
</table>
<h5 id="更新表"><a href="#更新表" class="headerlink" title="更新表"></a>更新表</h5><p>以下展示了添加和删除列的用法：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name</div><div class="line"><span class="keyword">ADD</span> column_name column_type;</div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name</div><div class="line"><span class="keyword">DROP</span> column_name;</div></pre></td></tr></table></figure>
<h5 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> table_name;</div></pre></td></tr></table></figure>
<hr>
<h2 id="使用视图"><a href="#使用视图" class="headerlink" title="使用视图"></a>使用视图</h2><p>视图(View)，其实就是封装起来的查询操作。【使用视图的好处大约就和贯彻面向对象思想的好处一样多。】</p>
<h5 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> view_name <span class="keyword">AS</span></div><div class="line">.....</div><div class="line">[<span class="keyword">SQL</span> <span class="keyword">Query</span>]</div><div class="line">.....</div></pre></td></tr></table></figure>
<p>之后需要再次执行该查询操作时，只需要直接用<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> column1,column2,...</div><div class="line"><span class="keyword">FROM</span> view_name</div><div class="line"><span class="keyword">WHERE</span> ...</div></pre></td></tr></table></figure></p>
<p>即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;后面储存过程、事务处理、游标和一些高级特性感觉太遥远就只是翻了翻，没作整理。&lt;/p&gt;
    
    </summary>
    
      <category term="SQL" scheme="http://gabrieldrapor.github.io/categories/SQL/"/>
    
    
      <category term="SQL" scheme="http://gabrieldrapor.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>SQL Syntax(Ⅱ)</title>
    <link href="http://gabrieldrapor.github.io/2017/04/23/posts/170423_sql2/"/>
    <id>http://gabrieldrapor.github.io/2017/04/23/posts/170423_sql2/</id>
    <published>2017-04-23T00:00:00.000Z</published>
    <updated>2017-08-19T05:48:29.394Z</updated>
    
    <content type="html"><![CDATA[<p>继续。</p>
<a id="more"></a>
<hr>
<h2 id="创建计算字段"><a href="#创建计算字段" class="headerlink" title="创建计算字段"></a>创建计算字段</h2><p>以下以书中例子呈现相关用法。</p>
<ul>
<li>拼接字段</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> vend_name + <span class="string">'('</span> + vend_country+ <span class="string">')'</span></div><div class="line"><span class="keyword">FROM</span> venders</div><div class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vender_name;</div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> vend_name || <span class="string">'('</span> || vend_country+ <span class="string">')'</span></div><div class="line"><span class="keyword">FROM</span> venders</div><div class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vender_name;</div></pre></td></tr></table></figure>
<p>以上两种写法是等价的，还可以用RTRIM()去除字符串右边的空格，用LTRIM()去除字符串左边的空格，用TRIM()去除字符串左右两边的空格。<br>特别地，在MySQL和MariaDB中需要使用Concat()函数来完成相同的功能：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># In MySQL and MariaDB</div><div class="line">SELECT Concat(vend_name, '(', vend_country, ')')</div><div class="line">FROM venders</div><div class="line">ORDER BY vender_name;</div></pre></td></tr></table></figure></p>
<ul>
<li>为结果使用别名</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> vend_name + <span class="string">'('</span> + vend_country+ <span class="string">')'</span></div><div class="line"><span class="keyword">AS</span> vend_title</div><div class="line"><span class="keyword">FROM</span> venders</div><div class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vender_name;</div></pre></td></tr></table></figure>
<ul>
<li>执行算术计算</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> prod_id,</div><div class="line">       quantity,</div><div class="line">       item_price,</div><div class="line">       quantity*item_price <span class="keyword">AS</span> expanded_price</div><div class="line"><span class="keyword">FROM</span> OrderItems</div><div class="line"><span class="keyword">WHERE</span> order_num = <span class="number">20008</span>;</div></pre></td></tr></table></figure>
<hr>
<h2 id="使用函数处理数据"><a href="#使用函数处理数据" class="headerlink" title="使用函数处理数据"></a>使用函数处理数据</h2><table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">LEFT()（或使用子字符串函数）</td>
<td style="text-align:center">返回字符串左边的字符</td>
</tr>
<tr>
<td style="text-align:center">LENGTH()（也使用DATALENGTH()或LEN()）</td>
<td style="text-align:center">返回字符串的长度</td>
</tr>
<tr>
<td style="text-align:center">LOWER()（Access使用LCASE()）</td>
<td style="text-align:center">将字符串转换为小写</td>
</tr>
<tr>
<td style="text-align:center">SOUNDEX()</td>
<td style="text-align:center">返回字符串的SOUNDEX值（Access和PostgreSQL不支持，SQLite需要编译支持）</td>
</tr>
<tr>
<td style="text-align:center">UPPER()</td>
<td style="text-align:center">将字符串转换为大写</td>
</tr>
<tr>
<td style="text-align:center">DATEPART()</td>
<td style="text-align:center">返回日期类型中的年、月或日</td>
</tr>
</tbody>
</table>
<p>关于SOUNDEX()，</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> cust_name, cust_contact</div><div class="line"><span class="keyword">FROM</span> Customers</div><div class="line"><span class="keyword">WHERE</span> <span class="keyword">SOUNDEX</span>(cust_contact) = <span class="keyword">SOUNDEX</span>(<span class="string">'Michael Green'</span>)</div></pre></td></tr></table></figure>
<p>【实测了一下，Michelle和Michael，Knuth和Kant的SOUNDEX值都是一样的，但是Bitch和Beach是不一样的，前者的SOUNDEX值是B320，后者则是B200……】</p>
<hr>
<h2 id="汇总数据"><a href="#汇总数据" class="headerlink" title="汇总数据"></a>汇总数据</h2><ul>
<li><p>聚集函数</p>
<p>常用的函数包括AVG(), COUNT(), MAX(), MIN(), SUM()等，可以使用WHERE过滤，这些函数默认会忽略值为NULL的行，用*则可以不忽略；</p>
</li>
<li><p>聚集不同值</p>
<p>ALL代表对所有行进行运算，是默认行为，不需要指定；</p>
<p>DISTINCT只对不同的行进行操作；</p>
</li>
<li><p>组合聚集函数</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> num_items,</div><div class="line">       <span class="keyword">MIN</span>(prod_price) <span class="keyword">AS</span> price_min,</div><div class="line">       <span class="keyword">MAX</span>(prod_price) <span class="keyword">AS</span> price_max,</div><div class="line">       ACG(prod_price) <span class="keyword">AS</span> price_avg</div><div class="line"><span class="keyword">FROM</span> Products;</div></pre></td></tr></table></figure>
<hr>
<h2 id="分组数据"><a href="#分组数据" class="headerlink" title="分组数据"></a>分组数据</h2><ul>
<li>创建分组</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> vend_id, <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> num_prods</div><div class="line"><span class="keyword">FROM</span> Products</div><div class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> vend_id</div><div class="line"></div><div class="line"><span class="comment">/*output:</span></div><div class="line">vend_id		num_prods</div><div class="line">-------		---------</div><div class="line">BRS01		3</div><div class="line">DLL01		4</div><div class="line">FNG01		2</div><div class="line">*/</div></pre></td></tr></table></figure>
<p>其中，GROUP BY后可以包含任意数目的列以进行更细致的数据分组，还可以在子句中嵌套分组。SELECT语句中的每一列都必须在GROUP BY子句中给出。包含NULL值的行会被作为一个分组返回。GROUP BY子句必须在WHERE子句之后，ORDER BY子句之前。</p>
<ul>
<li><p>过滤分组</p>
<p>即规定包括哪些组，排除哪些组。</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> cust_id, <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> orders</div><div class="line"><span class="keyword">FROM</span> Orders</div><div class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> cust_id</div><div class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*) &gt;= <span class="number">2</span></div></pre></td></tr></table></figure>
<p>  这里不能用 WHERE替换HAVING，可以理解为 WHERE 在分组前进行过滤，故排除的行不包括在分组中，而 HAVING      在数据分组后过滤。当然，两个子句并非不能同时存在，如：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> cust_id, <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> orders</div><div class="line"><span class="keyword">FROM</span> Orders</div><div class="line"><span class="keyword">WHERE</span> prod_price &gt;= <span class="number">4</span></div><div class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> cust_id</div><div class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*) &gt;= <span class="number">2</span></div><div class="line"><span class="comment">/*output:</span></div><div class="line">vend_id		num_prods</div><div class="line">-------		---------</div><div class="line">BRS01		3</div><div class="line">DLL01		2</div><div class="line">*/</div></pre></td></tr></table></figure>
<ul>
<li><p>分组和排序</p>
<p>下表列出了 ORDER BY 和 GROUP BY 的区别</p>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">ORDER BY</th>
<th style="text-align:center">GROUP BY</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">对产生的输出进行排序</td>
<td style="text-align:center">对行分组，但输出可能不是分组的顺序【所以可以在后面再使用ORDER BY对输出进行排序】</td>
</tr>
<tr>
<td style="text-align:center">任意列都可以使用（甚至非选择的列也可以使用）</td>
<td style="text-align:center">只可能使用选择列或表达式列，而且必须使用每个选择列表达式</td>
</tr>
<tr>
<td style="text-align:center">不一定需要</td>
<td style="text-align:center">如果与聚集函数一起使用列（或表达式），则必须使用</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="使用子查询"><a href="#使用子查询" class="headerlink" title="使用子查询"></a>使用子查询</h2><p>子查询(Subquery)，即嵌套在其他查询中的查询。在需要多个SQL语句共同完成一个任务且他们之间存在递进关系时，可以使用类似于以下的用法：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> cust_id</div><div class="line"><span class="keyword">FROM</span> Orders</div><div class="line"><span class="keyword">WHERE</span> order_num <span class="keyword">IN</span> (<span class="keyword">SELECT</span> order_num</div><div class="line">                    <span class="keyword">FROM</span> OrderItems</div><div class="line">                    <span class="keyword">WHERE</span> prod_id = <span class="string">'RGAN01'</span>);</div></pre></td></tr></table></figure>
<p>这其实就是将括号中的 SELECT order_num FROM OrderItems WHERE prod_id = ‘RGAN01’ 这一句的输出结果传递给外面的 WHERE 查询子句。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;继续。&lt;/p&gt;
    
    </summary>
    
      <category term="SQL" scheme="http://gabrieldrapor.github.io/categories/SQL/"/>
    
    
      <category term="SQL" scheme="http://gabrieldrapor.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>SQL Syntax(Ⅱ)</title>
    <link href="http://gabrieldrapor.github.io/2017/04/23/170423_sql2/"/>
    <id>http://gabrieldrapor.github.io/2017/04/23/170423_sql2/</id>
    <published>2017-04-23T00:00:00.000Z</published>
    <updated>2017-08-06T03:36:34.049Z</updated>
    
    <content type="html"><![CDATA[<p>继续。</p>
<a id="more"></a>
<hr>
<h2 id="创建计算字段"><a href="#创建计算字段" class="headerlink" title="创建计算字段"></a>创建计算字段</h2><p>以下以书中例子呈现相关用法。</p>
<ul>
<li>拼接字段</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> vend_name + <span class="string">'('</span> + vend_country+ <span class="string">')'</span></div><div class="line"><span class="keyword">FROM</span> venders</div><div class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vender_name;</div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> vend_name || <span class="string">'('</span> || vend_country+ <span class="string">')'</span></div><div class="line"><span class="keyword">FROM</span> venders</div><div class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vender_name;</div></pre></td></tr></table></figure>
<p>以上两种写法是等价的，还可以用RTRIM()去除字符串右边的空格，用LTRIM()去除字符串左边的空格，用TRIM()去除字符串左右两边的空格。<br>特别地，在MySQL和MariaDB中需要使用Concat()函数来完成相同的功能：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># In MySQL and MariaDB</div><div class="line">SELECT Concat(vend_name, '(', vend_country, ')')</div><div class="line">FROM venders</div><div class="line">ORDER BY vender_name;</div></pre></td></tr></table></figure></p>
<ul>
<li>为结果使用别名</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> vend_name + <span class="string">'('</span> + vend_country+ <span class="string">')'</span></div><div class="line"><span class="keyword">AS</span> vend_title</div><div class="line"><span class="keyword">FROM</span> venders</div><div class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vender_name;</div></pre></td></tr></table></figure>
<ul>
<li>执行算术计算</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> prod_id,</div><div class="line">       quantity,</div><div class="line">       item_price,</div><div class="line">       quantity*item_price <span class="keyword">AS</span> expanded_price</div><div class="line"><span class="keyword">FROM</span> OrderItems</div><div class="line"><span class="keyword">WHERE</span> order_num = <span class="number">20008</span>;</div></pre></td></tr></table></figure>
<hr>
<h2 id="使用函数处理数据"><a href="#使用函数处理数据" class="headerlink" title="使用函数处理数据"></a>使用函数处理数据</h2><table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">LEFT()（或使用子字符串函数）</td>
<td style="text-align:center">返回字符串左边的字符</td>
</tr>
<tr>
<td style="text-align:center">LENGTH()（也使用DATALENGTH()或LEN()）</td>
<td style="text-align:center">返回字符串的长度</td>
</tr>
<tr>
<td style="text-align:center">LOWER()（Access使用LCASE()）</td>
<td style="text-align:center">将字符串转换为小写</td>
</tr>
<tr>
<td style="text-align:center">SOUNDEX()</td>
<td style="text-align:center">返回字符串的SOUNDEX值（Access和PostgreSQL不支持，SQLite需要编译支持）</td>
</tr>
<tr>
<td style="text-align:center">UPPER()</td>
<td style="text-align:center">将字符串转换为大写</td>
</tr>
<tr>
<td style="text-align:center">DATEPART()</td>
<td style="text-align:center">返回日期类型中的年、月或日</td>
</tr>
</tbody>
</table>
<p>关于SOUNDEX()，</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> cust_name, cust_contact</div><div class="line"><span class="keyword">FROM</span> Customers</div><div class="line"><span class="keyword">WHERE</span> <span class="keyword">SOUNDEX</span>(cust_contact) = <span class="keyword">SOUNDEX</span>(<span class="string">'Michael Green'</span>)</div></pre></td></tr></table></figure>
<p>【实测了一下，Michelle和Michael，Knuth和Kant的SOUNDEX值都是一样的，但是Bitch和Beach是不一样的，前者的SOUNDEX值是B320，后者则是B200……】</p>
<hr>
<h2 id="汇总数据"><a href="#汇总数据" class="headerlink" title="汇总数据"></a>汇总数据</h2><ul>
<li><p>聚集函数</p>
<p>常用的函数包括AVG(), COUNT(), MAX(), MIN(), SUM()等，可以使用WHERE过滤，这些函数默认会忽略值为NULL的行，用*则可以不忽略；</p>
</li>
<li><p>聚集不同值</p>
<p>ALL代表对所有行进行运算，是默认行为，不需要指定；</p>
<p>DISTINCT只对不同的行进行操作；</p>
</li>
<li><p>组合聚集函数</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> num_items,</div><div class="line">       <span class="keyword">MIN</span>(prod_price) <span class="keyword">AS</span> price_min,</div><div class="line">       <span class="keyword">MAX</span>(prod_price) <span class="keyword">AS</span> price_max,</div><div class="line">       ACG(prod_price) <span class="keyword">AS</span> price_avg</div><div class="line"><span class="keyword">FROM</span> Products;</div></pre></td></tr></table></figure>
<hr>
<h2 id="分组数据"><a href="#分组数据" class="headerlink" title="分组数据"></a>分组数据</h2><ul>
<li>创建分组</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> vend_id, <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> num_prods</div><div class="line"><span class="keyword">FROM</span> Products</div><div class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> vend_id</div><div class="line"></div><div class="line"><span class="comment">/*output:</span></div><div class="line">vend_id		num_prods</div><div class="line">-------		---------</div><div class="line">BRS01		3</div><div class="line">DLL01		4</div><div class="line">FNG01		2</div><div class="line">*/</div></pre></td></tr></table></figure>
<p>其中，GROUP BY后可以包含任意数目的列以进行更细致的数据分组，还可以在子句中嵌套分组。SELECT语句中的每一列都必须在GROUP BY子句中给出。包含NULL值的行会被作为一个分组返回。GROUP BY子句必须在WHERE子句之后，ORDER BY子句之前。</p>
<ul>
<li><p>过滤分组</p>
<p>即规定包括哪些组，排除哪些组。</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> cust_id, <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> orders</div><div class="line"><span class="keyword">FROM</span> Orders</div><div class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> cust_id</div><div class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*) &gt;= <span class="number">2</span></div></pre></td></tr></table></figure>
<p>  这里不能用 WHERE替换HAVING，可以理解为 WHERE 在分组前进行过滤，故排除的行不包括在分组中，而 HAVING      在数据分组后过滤。当然，两个子句并非不能同时存在，如：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> cust_id, <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> orders</div><div class="line"><span class="keyword">FROM</span> Orders</div><div class="line"><span class="keyword">WHERE</span> prod_price &gt;= <span class="number">4</span></div><div class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> cust_id</div><div class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*) &gt;= <span class="number">2</span></div><div class="line"><span class="comment">/*output:</span></div><div class="line">vend_id		num_prods</div><div class="line">-------		---------</div><div class="line">BRS01		3</div><div class="line">DLL01		2</div><div class="line">*/</div></pre></td></tr></table></figure>
<ul>
<li><p>分组和排序</p>
<p>下表列出了 ORDER BY 和 GROUP BY 的区别</p>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">ORDER BY</th>
<th style="text-align:center">GROUP BY</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">对产生的输出进行排序</td>
<td style="text-align:center">对行分组，但输出可能不是分组的顺序【所以可以在后面再使用ORDER BY对输出进行排序】</td>
</tr>
<tr>
<td style="text-align:center">任意列都可以使用（甚至非选择的列也可以使用）</td>
<td style="text-align:center">只可能使用选择列或表达式列，而且必须使用每个选择列表达式</td>
</tr>
<tr>
<td style="text-align:center">不一定需要</td>
<td style="text-align:center">如果与聚集函数一起使用列（或表达式），则必须使用</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="使用子查询"><a href="#使用子查询" class="headerlink" title="使用子查询"></a>使用子查询</h2><p>子查询(Subquery)，即嵌套在其他查询中的查询。在需要多个SQL语句共同完成一个任务且他们之间存在递进关系时，可以使用类似于以下的用法：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> cust_id</div><div class="line"><span class="keyword">FROM</span> Orders</div><div class="line"><span class="keyword">WHERE</span> order_num <span class="keyword">IN</span> (<span class="keyword">SELECT</span> order_num</div><div class="line">                    <span class="keyword">FROM</span> OrderItems</div><div class="line">                    <span class="keyword">WHERE</span> prod_id = <span class="string">'RGAN01'</span>);</div></pre></td></tr></table></figure>
<p>这其实就是将括号中的 SELECT order_num FROM OrderItems WHERE prod_id = ‘RGAN01’ 这一句的输出结果传递给外面的 WHERE 查询子句。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;继续。&lt;/p&gt;
    
    </summary>
    
      <category term="SQL" scheme="http://gabrieldrapor.github.io/categories/SQL/"/>
    
    
      <category term="SQL" scheme="http://gabrieldrapor.github.io/tags/SQL/"/>
    
  </entry>
  
</feed>
